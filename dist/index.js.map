{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright (C) 2020 Online Mic Test\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n * @license\n */\nconsole.log('Licensed under AGPL-3.0: https://github.com/onlinemictest/pitch-detector')\n\ntype NoteString = 'C' | 'C#' | 'D' | 'D#' | 'E' | 'F' | 'F#' | 'G' | 'G#' | 'A' | 'A#' | 'B';\n\nconst middleA = 440;\n\nconst SEMI_TONE = 69;\nconst WHEEL_NOTES = 24;\nconst BUFFER_SIZE = 2 ** 12;\nconst NOTE_STRINGS: NoteString[] = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\nconst GUITAR_NOTES = ['E_4', 'B_3', 'G_3', 'D_3', 'A_2', 'E_2'];\n\nconst toggleClass = (element: HTMLElement, ...cls: string[]) => {\n  element.classList.remove(...cls);\n\n  // Force layout reflow\n  void element.offsetWidth;\n\n  element.classList.add(...cls);\n};\n\nfunction initGetUserMedia() {\n  // @ts-ignore\n  window.AudioContext = window.AudioContext || window.webkitAudioContext\n  if (!window.AudioContext) {\n    return alert('AudioContext not supported')\n  }\n\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    // @ts-ignore\n    navigator.mediaDevices = {}\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      // @ts-ignore\n      const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        alert('getUserMedia is not implemented in this browser')\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject)\n      })\n    }\n  }\n}\n\ninterface Note {\n  value: number,\n  index: number,\n  name: NoteString\n  cents: number\n  octave: number,\n  frequency: number,\n}\n\nfunction getNote(frequency: number): Note {\n  const noteIndex = getNoteIndex(frequency);\n  return {\n    value: noteIndex % 12,\n    index: noteIndex,\n    name: NOTE_STRINGS[noteIndex % 12],\n    cents: getCents(frequency, noteIndex),\n    octave: Math.trunc(noteIndex / 12) - 1,\n    frequency: frequency,\n  };\n}\n\n/**\n * Get musical note from frequency\n */\nfunction getNoteIndex(frequency: number) {\n  const note = 12 * (Math.log(frequency / middleA) / Math.log(2))\n  return Math.round(note) + SEMI_TONE\n}\n\n/**\n * Get the musical note's standard frequency\n */\nfunction getStandardFrequency(note: number) {\n  return middleA * Math.pow(2, (note - SEMI_TONE) / 12)\n}\n\n/**\n * Get cents difference between given frequency and musical note's standard frequency\n */\nfunction getCents(frequency: number, note: number) {\n  return Math.floor((1200 * Math.log(frequency / getStandardFrequency(note))) / Math.log(2));\n}\n\nconst floor = (n: number, basis = 1) => Math.floor(n / basis) * basis;\nconst ceil = (n: number, basis = 1) => Math.ceil(n / basis) * basis;\nconst round = (n: number, basis = 1) => Math.round(n / basis) * basis;\n\n// @ts-expect-error\nAubio().then(({ Pitch }) => {\n  initGetUserMedia();\n\n  if (\n    !('WebAssembly' in window) ||\n    !('AudioContext' in window) ||\n    !('createAnalyser' in AudioContext.prototype) ||\n    !('createScriptProcessor' in AudioContext.prototype) ||\n    !('trunc' in Math)\n  ) {\n    return alert('Browser not supported')\n  }\n\n  // const wheel = document.getElementById('pitch-wheel-svg') as HTMLImageElement | null;\n  // const freqSpan = document.getElementById('pitch-freq')?.querySelector('.freq') as HTMLElement | null;\n  // const noteSpan = document.getElementById('pitch-freq')?.querySelector('.note') as HTMLElement | null;\n  // const octaveSpan = document.getElementById('pitch-freq')?.querySelector('.octave') as HTMLElement | null;\n  const startEl = document.getElementById('audio-start') as HTMLButtonElement;\n  const pauseEl = document.getElementById('audio-pause') as HTMLButtonElement;\n  const matchCircleR = document.getElementById('match-circle-r') as HTMLDivElement;\n  const matchCircleL = document.getElementById('match-circle-l') as HTMLDivElement;\n  // const freqTextEl = document.getElementById('pitch-freq-text') as HTMLElement | null;\n  // const block2 = document.querySelector('.audio-block-2') as HTMLElement | null;\n  // if (!wheel || !freqSpan || !noteSpan || !octaveSpan || !startEl || !pauseEl || !freqTextEl) return;\n\n  let audioContext: AudioContext;\n  let analyser: AnalyserNode;\n  let scriptProcessor: ScriptProcessorNode;\n  let pitchDetector: Aubio.Pitch;\n  // let stream: MediaStream;\n\n  const tuneUpText = matchCircleR.innerText;\n\n  pauseEl.addEventListener('click', () => {\n    scriptProcessor.disconnect(audioContext.destination);\n    analyser.disconnect(scriptProcessor);\n    audioContext.close();\n    // stream.getTracks().forEach(track => track.stop());\n\n    startEl.style.display = 'block';\n    pauseEl.style.display = 'none';\n    matchCircleL.style.transform = `translateX(-30vw)`;\n    matchCircleR.innerText = tuneUpText;\n    matchCircleR.classList.add('with-text');\n    matchCircleR.style.color = '';\n    // freqTextEl.style.display = 'none';\n    // if (block2) block2.style.display = 'block';\n    toggleClass(startEl, 'blob-animation');\n  })\n\n  startEl.addEventListener('click', () => {\n    audioContext = new AudioContext();\n    analyser = audioContext.createAnalyser();\n    scriptProcessor = audioContext.createScriptProcessor(BUFFER_SIZE, 1, 1);\n    pitchDetector = new Pitch('default', BUFFER_SIZE, 1, audioContext.sampleRate);\n    pitchDetector.setSilence(-70);\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      // stream = s;\n      audioContext.createMediaStreamSource(stream).connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n\n      startEl.style.display = 'none';\n      pauseEl.style.display = 'block';\n      matchCircleR.innerText = '';\n      matchCircleR.classList.remove('with-text');\n      // freqTextEl.style.display = 'block';\n      // if (block2) block2.style.display = 'none';\n      toggleClass(pauseEl, 'shrink-animation');\n\n      matchCircleL.style.visibility = 'visible';\n\n      // console.time('foo');\n      let prevCents = -50;\n      let prevNotes: string[] = new Array(3);\n\n      scriptProcessor.addEventListener('audioprocess', event => {\n        // console.timeEnd('foo');\n        // console.time('foo');\n\n        const buffer = event.inputBuffer.getChannelData(0)\n        const volume = volumeAudioProcess(buffer);\n        const frequency = pitchDetector.do(buffer);\n        const note = getNote(frequency);\n\n        // const unit = (360 / WHEEL_NOTES);\n        // const deg = note.index * unit + (note.cents / 100) * unit;\n        // console.log(note.name)\n\n        if (!note.name) return;\n\n        const noteId = `${note.name}_${note.octave}`;\n        if (GUITAR_NOTES.includes(noteId)) {\n          if (prevNotes.every(_ => _ === note.name) && !Number.isNaN(note.cents)) {\n\n            console.log(note);\n\n            // if (prevNote == note.name)\n            // const degDiff = Math.trunc(Math.abs(prevDeg - deg));\n            // prevDeg = deg;\n            // const transformTime = (degDiff + 25) * 15;\n\n            const centsApprox = round(note.cents, 5);\n            console.log(centsApprox)\n\n            // const transitionTime = 200 + Math.abs(prevCents - centsApprox) * 10;\n            // console.log(transitionTime)\n\n            // matchCircleR.style.transform = `translateX(${note.cents}%)`;\n            matchCircleL.style.transition = `transform 200ms ease`;\n            matchCircleL.style.transform = `translateX(${-centsApprox}%)`;\n\n            matchCircleR.innerText = note.name;\n            if (centsApprox === 0) matchCircleR.style.color = '#fff';\n            else matchCircleR.style.color = '#fff8';\n\n            prevCents = centsApprox;\n          }\n\n          prevNotes.pop();\n          prevNotes.unshift(note.name);\n\n          // freqSpan.innerText = note.frequency.toFixed(1);\n          // noteSpan.innerText = note.name;\n          // octaveSpan.innerText = note.octave.toString();\n\n          // wheel.style.transition = `transform ${transformTime}ms ease`;\n          // wheel.style.transform = `rotate(-${deg}deg)`;\n        }\n      });\n    });\n  });\n});\n\nfunction volumeAudioProcess(buf: Float32Array) {\n  let bufLength = buf.length;\n  let sum = 0;\n  let x;\n\n  // Do a root-mean-square on the samples: sum up the squares...\n  for (let i = 0; i < bufLength; i++) {\n    x = buf[i];\n    // if (Math.abs(x) >= clipLevel) {\n    //   this.clipping = true;\n    //   lastClip = window.performance.now();\n    // }\n    sum += x * x;\n  }\n\n  // ... then take the square root of the sum.\n  let rms = Math.sqrt(sum / bufLength);\n\n  // Now smooth this out with the averaging factor applied\n  // to the previous sample - take the max here because we\n  // want \"fast attack, slow release.\"\n  // this.volume = Math.max(rms, this.volume * this.averaging);\n  return rms;\n}\n\n"],"names":["console","log","BUFFER_SIZE","Math","NOTE_STRINGS","GUITAR_NOTES","toggleClass","element","cls","classList","remove","offsetWidth","add","getNote","frequency","noteIndex","note","round","getNoteIndex","value","index","name","cents","getCents","octave","trunc","floor","pow","getStandardFrequency","Aubio","then","Pitch","window","AudioContext","webkitAudioContext","alert","undefined","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","initGetUserMedia","prototype","startEl","document","getElementById","pauseEl","matchCircleR","matchCircleL","audioContext","analyser","scriptProcessor","pitchDetector","tuneUpText","innerText","addEventListener","disconnect","destination","close","style","display","transform","color","createAnalyser","createScriptProcessor","sampleRate","setSilence","audio","stream","createMediaStreamSource","connect","visibility","prevNotes","Array","event","buffer","inputBuffer","getChannelData","buf","x","bufLength","length","sum","i","sqrt","volumeAudioProcess","do","noteId","includes","every","_","Number","isNaN","centsApprox","n","basis","transition","pop","unshift"],"mappings":"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"}