{"version":3,"file":"index.js","sources":["../src/dom-fns.ts","../src/music-fns.ts","../src/iter.ts","../src/index.ts","../src/init-get-user-media.ts"],"sourcesContent":["export const toggleClass = (element: HTMLElement, ...cls: string[]) => {\n  element.classList.remove(...cls);\n\n  // Force layout reflow\n  void element.offsetWidth;\n\n  element.classList.add(...cls);\n};\n","export type NoteString = 'C' | 'C#' | 'D' | 'D#' | 'E' | 'F' | 'F#' | 'G' | 'G#' | 'A' | 'A#' | 'B';\n\nexport const middleA = 440;\n\nexport const SEMI_TONE = 69;\nexport const NOTE_STRINGS: NoteString[] = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\nexport interface Note {\n  value: number,\n  index: number,\n  name: NoteString\n  cents: number\n  octave: number,\n  frequency: number,\n}\n\nexport function getNote(frequency: number): Note {\n  const noteIndex = getNoteIndex(frequency);\n  // console.log(`${NOTE_STRINGS[noteIndex % 12]}_${Math.floor(noteIndex / 12) - 1}`, noteIndex)\n  return {\n    value: noteIndex % 12,\n    index: noteIndex,\n    name: NOTE_STRINGS[noteIndex % 12],\n    cents: getCents(frequency, noteIndex),\n    octave: Math.floor(noteIndex / 12) - 1,\n    frequency: frequency,\n  };\n}\n\n/**\n * Get musical note from frequency\n */\nexport function getNoteIndex(frequency: number) {\n  const note = 12 * (Math.log(frequency / middleA) / Math.log(2))\n  return Math.round(note) + SEMI_TONE\n}\n\n/**\n * Get the musical note's standard frequency\n */\nexport function getStandardFrequency(note: number) {\n  return middleA * (2 ** ((note - SEMI_TONE) / 12));\n}\n\n/**\n * Get cents difference between given frequency and musical note's standard frequency\n */\nexport function getCents(frequency: number, note: number) {\n  return Math.floor((1200 * Math.log(frequency / getStandardFrequency(note))) / Math.log(2));\n}","/** Allows an iterator to be used within a for loop to continue the iteration */\nexport function cont<T>(it: Iterator<T>) {\n  return { [Symbol.iterator]() { return it } }\n}\n\nexport function* groupedUntilChanged<X>(xs: Iterable<X>, equals: (a: X, b: X) => boolean = (a, b) => a === b): IterableIterator<X[]> {\n  const it = xs[Symbol.iterator]();\n  const { done, value: initial } = it.next();\n  if (done) return;\n\n  let group: X[] = [];\n\n  group.push(initial);\n  let prev = initial;\n\n  for (const x of cont(it)) {\n    if (equals(x, prev)) {\n      group.push(x);\n      prev = x;\n    } else {\n      yield [...group];\n      group = [x];\n      prev = x;\n    }\n  }\n\n  if (group.length) yield group\n}","/**\n * Copyright (C) 2021 Online Mic Test\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n * @license\n */\n\nimport { initGetUserMedia } from \"./init-get-user-media\";\nimport { toggleClass } from \"./dom-fns\";\nimport { getNote } from \"./music-fns\";\nimport { groupedUntilChanged } from \"./iter\";\n\nconsole.log('Licensed under AGPL-3.0: https://github.com/onlinemictest/guitar-tuner')\n\nconst BUFFER_SIZE = 2 ** 12;\nconst GUITAR_NOTES = ['E_4', 'B_3', 'G_3', 'D_3', 'A_2', 'E_2'];\n\nconst floor = (n: number, basis = 1) => Math.floor(n / basis) * basis;\nconst ceil = (n: number, basis = 1) => Math.ceil(n / basis) * basis;\nconst round = (n: number, basis = 1) => Math.round(n / basis) * basis;\nconst clamp = (n: number) => Math.max(0, Math.min(1, n));\n\n// @ts-expect-error\nAubio().then(({ Pitch }) => {\n  initGetUserMedia();\n\n  if (\n    !('WebAssembly' in window) ||\n    !('AudioContext' in window) ||\n    !('createAnalyser' in AudioContext.prototype) ||\n    !('createScriptProcessor' in AudioContext.prototype) ||\n    !('trunc' in Math)\n  ) {\n    return alert('Browser not supported')\n  }\n\n  // const wheel = document.getElementById('pitch-wheel-svg') as HTMLImageElement | null;\n  // const freqSpan = document.getElementById('pitch-freq')?.querySelector('.freq') as HTMLElement | null;\n  // const noteSpan = document.getElementById('pitch-freq')?.querySelector('.note') as HTMLElement | null;\n  // const octaveSpan = document.getElementById('pitch-freq')?.querySelector('.octave') as HTMLElement | null;\n  const startEl = document.getElementById('audio-start') as HTMLButtonElement;\n  const pauseEl = document.getElementById('audio-pause') as HTMLButtonElement;\n  const matchCircleR = document.getElementById('match-circle-r') as HTMLDivElement;\n  const matchCircleL = document.getElementById('match-circle-l') as HTMLDivElement;\n  const innerCircle = document.getElementById('inner-circle') as HTMLDivElement;\n  // const freqTextEl = document.getElementById('pitch-freq-text') as HTMLElement | null;\n  // const block2 = document.querySelector('.audio-block-2') as HTMLElement | null;\n  // if (!wheel || !freqSpan || !noteSpan || !octaveSpan || !startEl || !pauseEl || !freqTextEl) return;\n\n  let audioContext: AudioContext;\n  let analyser: AnalyserNode;\n  let scriptProcessor: ScriptProcessorNode;\n  let pitchDetector: Aubio.Pitch;\n  // let stream: MediaStream;\n\n  const initText = matchCircleR.innerText;\n\n  pauseEl.addEventListener('click', () => {\n    scriptProcessor.disconnect(audioContext.destination);\n    analyser.disconnect(scriptProcessor);\n    audioContext.close();\n    // stream.getTracks().forEach(track => track.stop());\n\n    startEl.style.display = 'block';\n    pauseEl.style.display = 'none';\n    matchCircleL.style.transform = `translateX(30vw)`;\n    matchCircleR.innerText = initText;\n    matchCircleR.classList.add('with-text');\n    matchCircleR.style.color = '';\n    // freqTextEl.style.display = 'none';\n    // if (block2) block2.style.display = 'block';\n    toggleClass(startEl, 'blob-animation');\n  })\n\n  startEl.addEventListener('click', () => {\n    audioContext = new AudioContext();\n    analyser = audioContext.createAnalyser();\n    scriptProcessor = audioContext.createScriptProcessor(BUFFER_SIZE, 1, 1);\n    pitchDetector = new Pitch('default', BUFFER_SIZE, 1, audioContext.sampleRate);\n    // pitchDetector.setSilence(-70);\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      // stream = s;\n      audioContext.createMediaStreamSource(stream).connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n\n      startEl.style.display = 'none';\n      pauseEl.style.display = 'block';\n      matchCircleR.innerText = 'Pluck a String';\n      matchCircleR.classList.add('with-text');\n      // freqTextEl.style.display = 'block';\n      // if (block2) block2.style.display = 'none';\n      toggleClass(pauseEl, 'shrink-animation');\n\n      matchCircleL.style.visibility = 'visible';\n\n      let prevCents = -50;\n      let prevNote = '';\n      const prevNotes: string[] = new Array(3).fill('');\n      const hitBuffer: Map<string, number[]> = new Map(GUITAR_NOTES.map(n => [n, new Array(36).fill(50)]));\n      const noopBuffer: string[] = new Array(36).fill('');\n\n      scriptProcessor.addEventListener('audioprocess', event => {\n        // console.timeEnd('foo');\n        // console.time('foo');\n\n        const buffer = event.inputBuffer.getChannelData(0)\n        // const volume = volumeAudioProcess(buffer);\n        const frequency = pitchDetector.do(buffer);\n        const note = getNote(frequency);\n\n        queue(noopBuffer, note.name);\n        if ([...groupedUntilChanged(noopBuffer.filter(n => !!n))].every(g => g.length <= 3)) {\n          // If there has been nothing but noise for the last couple of seconds,\n          // show the message again:\n          matchCircleR.innerText = 'Pluck a String';\n          matchCircleR.classList.add('with-text');\n          matchCircleL.style.transform = `translateX(30vw)`;\n          matchCircleR.style.color = '';\n        } else if (note.name) {\n          if (prevNotes.every(_ => _ === note.name) && !Number.isNaN(note.cents)) {\n            // console.log(note);\n\n            // if (prevNote == note.name)\n            // const degDiff = Math.trunc(Math.abs(prevDeg - deg));\n            // prevDeg = deg;\n            // const transformTime = (degDiff + 25) * 15;\n\n            const absCents100 = Math.abs(note.cents) * 2;\n            const sensitivity = Math.min(10, Math.round(100 / absCents100));\n            const centsUI = round(note.cents, sensitivity);\n\n            // console.log(`${absCents2}/100 => %${sensitivity} => ${Math.abs(centsApprox) * 2}/100`);\n            // const centsApprox = note.cents;\n            // console.log(centsApprox)\n\n            // const transitionTime = 200 + Math.abs(prevCents - centsApprox) * 10;\n            // console.log(transitionTime)\n\n            // matchCircleR.style.transform = `translateX(${note.cents}%)`;\n            matchCircleR.innerText = note.name;\n            matchCircleR.classList.remove('with-text');\n\n            const noteName = `${note.name}_${note.octave}`;\n            queue(hitBuffer.get(noteName), centsUI);\n\n            const centsBuffer = hitBuffer.get(noteName) ?? [];\n            const centsHits = centsBuffer.filter(x => x === 0);\n\n            const referenceLength = 0.5 * centsBuffer.length;\n            const tuneRatio = clamp(centsHits.length / (referenceLength + 1));\n            // console.log(noteName, tuneRatio)\n            innerCircle.style.transition = prevNote !== noteName \n              ? ''\n              : `transform 350ms ease`;\n            innerCircle.style.transform = `scale(${1 - tuneRatio})`;\n            matchCircleR.style.color = tuneRatio === 1\n              ? '#fff'\n              : '#fff8';\n\n            matchCircleL.style.transition = `transform 350ms ease`;\n            matchCircleL.style.transform = `translateX(${centsUI * (1 - tuneRatio)}%)`;\n\n            // console.log(`Streak: ${centsHits.length}/${centsBuffer.length}`)\n\n            prevCents = centsUI;\n            prevNote = noteName;\n          }\n\n          queue(prevNotes, note.name);\n        }\n      });\n    });\n  });\n});\n\nconst queue = <T>(a: T[] | null | undefined, x: T) => (a?.pop(), a?.unshift(x), a);\n\nfunction volumeAudioProcess(buf: Float32Array) {\n  let bufLength = buf.length;\n  let sum = 0;\n  let x;\n\n  // Do a root-mean-square on the samples: sum up the squares...\n  for (let i = 0; i < bufLength; i++) {\n    x = buf[i];\n    // if (Math.abs(x) >= clipLevel) {\n    //   this.clipping = true;\n    //   lastClip = window.performance.now();\n    // }\n    sum += x * x;\n  }\n\n  // ... then take the square root of the sum.\n  let rms = Math.sqrt(sum / bufLength);\n\n  // Now smooth this out with the averaging factor applied\n  // to the previous sample - take the max here because we\n  // want \"fast attack, slow release.\"\n  // this.volume = Math.max(rms, this.volume * this.averaging);\n  return rms;\n}\n\n","export function initGetUserMedia() {\n  // @ts-ignore\n  window.AudioContext = window.AudioContext || window.webkitAudioContext\n  if (!window.AudioContext) {\n    return alert('AudioContext not supported')\n  }\n\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    // @ts-ignore\n    navigator.mediaDevices = {}\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      // @ts-ignore\n      const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        alert('getUserMedia is not implemented in this browser')\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject)\n      })\n    }\n  }\n}"],"names":["toggleClass","element","cls","classList","remove","offsetWidth","add","NOTE_STRINGS","getNote","frequency","noteIndex","note","Math","log","round","getNoteIndex","value","index","name","cents","getCents","octave","floor","getStandardFrequency","groupedUntilChanged","xs","equals","a","b","it","Symbol","iterator","done","initial","next","group","push","prev","x","[object Object]","cont","length","console","BUFFER_SIZE","GUITAR_NOTES","Aubio","then","Pitch","window","AudioContext","webkitAudioContext","alert","undefined","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","initGetUserMedia","prototype","startEl","document","getElementById","pauseEl","matchCircleR","matchCircleL","innerCircle","audioContext","analyser","scriptProcessor","pitchDetector","initText","innerText","addEventListener","disconnect","destination","close","style","display","transform","color","createAnalyser","createScriptProcessor","sampleRate","audio","stream","createMediaStreamSource","connect","visibility","prevNote","prevNotes","Array","fill","hitBuffer","Map","map","n","noopBuffer","event","buffer","inputBuffer","getChannelData","do","queue","filter","every","g","_","Number","isNaN","absCents100","abs","sensitivity","min","centsUI","basis","noteName","get","centsBuffer","centsHits","referenceLength","tuneRatio","max","transition","pop","unshift"],"mappings":"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"}