{"version":3,"file":"index.js","sources":["../src/dom-fns.ts","../src/music-fns.ts","../src/iter.ts","../src/index.ts","../src/init-get-user-media.ts"],"sourcesContent":["export const toggleClass = (element: HTMLElement, ...cls: string[]) => {\n  element.classList.remove(...cls);\n\n  // Force layout reflow\n  void element.offsetWidth;\n\n  element.classList.add(...cls);\n};\n","export type NoteString = 'C' | 'C#' | 'D' | 'D#' | 'E' | 'F' | 'F#' | 'G' | 'G#' | 'A' | 'A#' | 'B';\n\nexport const middleA = 440;\n\nexport const SEMI_TONE = 69;\nexport const NOTE_STRINGS: NoteString[] = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n\nexport interface Note {\n  value: number,\n  index: number,\n  name: NoteString\n  cents: number\n  octave: number,\n  frequency: number,\n}\n\nexport function getNote(frequency: number): Note {\n  const noteIndex = getNoteIndex(frequency);\n  // console.log(`${NOTE_STRINGS[noteIndex % 12]}_${Math.floor(noteIndex / 12) - 1}`, noteIndex)\n  return {\n    value: noteIndex % 12,\n    index: noteIndex,\n    name: NOTE_STRINGS[noteIndex % 12],\n    cents: getCents(frequency, noteIndex),\n    octave: Math.floor(noteIndex / 12) - 1,\n    frequency: frequency,\n  };\n}\n\n/**\n * Get musical note from frequency\n */\nexport function getNoteIndex(frequency: number) {\n  const note = 12 * (Math.log(frequency / middleA) / Math.log(2))\n  return Math.round(note) + SEMI_TONE\n}\n\n/**\n * Get the musical note's standard frequency\n */\nexport function getStandardFrequency(note: number) {\n  return middleA * (2 ** ((note - SEMI_TONE) / 12));\n}\n\n/**\n * Get cents difference between given frequency and musical note's standard frequency\n */\nexport function getCents(frequency: number, note: number) {\n  return Math.floor((1200 * Math.log(frequency / getStandardFrequency(note))) / Math.log(2));\n}\n\nexport function volumeAudioProcess(buf: Float32Array) {\n  let bufLength = buf.length;\n  let sum = 0;\n  let x;\n\n  // Do a root-mean-square on the samples: sum up the squares...\n  for (let i = 0; i < bufLength; i++) {\n    x = buf[i];\n    sum += x * x;\n  }\n\n  // ... then take the square root of the sum.\n  let rms = Math.sqrt(sum / bufLength);\n\n  return rms;\n}\n\n","/** Allows an iterator to be used within a for loop to continue the iteration */\nexport function cont<T>(it: Iterator<T>) {\n  return { [Symbol.iterator]() { return it } }\n}\n\nexport function* groupedUntilChanged<X>(xs: Iterable<X>, equals: (a: X, b: X) => boolean = (a, b) => a === b): IterableIterator<X[]> {\n  const it = xs[Symbol.iterator]();\n  const { done, value: initial } = it.next();\n  if (done) return;\n\n  let group: X[] = [];\n\n  group.push(initial);\n  let prev = initial;\n\n  for (const x of cont(it)) {\n    if (equals(x, prev)) {\n      group.push(x);\n      prev = x;\n    } else {\n      yield [...group];\n      group = [x];\n      prev = x;\n    }\n  }\n\n  if (group.length) yield group\n}\n\nexport function first<X>(xs: Iterable<X>) {\n  for (const x of xs) return x;\n}","/**\n * Copyright (C) 2021 Online Mic Test\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n * @license\n */\n\nimport { initGetUserMedia } from \"./init-get-user-media\";\nimport { toggleClass } from \"./dom-fns\";\nimport { getNote } from \"./music-fns\";\nimport { groupedUntilChanged } from \"./iter\";\n\nconsole.log('Licensed under AGPL-3.0: https://github.com/onlinemictest/guitar-tuner')\n\nconst BUFFER_SIZE = 2 ** 13;\n\n// Note buffer sizes\nconst PREV_BUFFER_SIZE = Math.ceil(3 / 2);\nconst NOOP_BUFFER_SIZE = 36 / 2;\nconst TUNE_BUFFER_SIZE = 12 / 2;\n\nconst GUITAR_FREQ = {\n  'E_4': 329.63,\n  'B_3': 246.94,\n  'G_3': 196.00,\n  'D_3': 146.83,\n  'A_2': 110.00,\n  'E_2': 82.41,\n};\nconst GUITAR_NOTES = Object.keys(GUITAR_FREQ);\nconst GUITAR_FREQ_INV = new Map(Object.entries(GUITAR_FREQ).map(([a, b]) => [b, a])) as Map<number, keyof (typeof GUITAR_FREQ)>\nconst GUITAR_FREQ_VAL = Object.values(GUITAR_FREQ).sort();\n\n// Helper fns\nconst set = (obj: any, prop: any, value: any) => obj && (obj[prop] = value);\nconst isTruthy = (x: any) => !!x;\nconst isFalsey = (x: any) => !x;\n\n// Math fns\n// const floor = (n: number, basis = 1) => Math.floor(n / basis) * basis;\n// const ceil = (n: number, basis = 1) => Math.ceil(n / basis) * basis;\nconst round = (n: number, basis = 1) => Math.round(n / basis) * basis;\nconst clamp = (n: number) => Math.max(0, Math.min(1, n));\n\n// Array fns\nconst queue = <T>(a: T[] | null | undefined, x: T) => (a?.pop(), a?.unshift(x), a);\nconst throwError = (m?: string) => { throw Error(m) };\nconst closest = (a: number[], goal: number) => a.reduce((prev, curr) =>\n  (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev));\n\nconst getClosestGuitarNote = (f: number) => GUITAR_FREQ_INV.get(closest(GUITAR_FREQ_VAL, f)) ?? throwError();\n\nif (false\n  || !('WebAssembly' in window) \n  || !('AudioContext' in window) \n  || !('createAnalyser' in AudioContext.prototype) \n  || !('createScriptProcessor' in AudioContext.prototype) \n) {\n  if (!('WebAssembly' in window)) throw alert(`Browser not supported: 'WebAssembly' is not defined`);\n  if (!('AudioContext' in window)) throw alert(`Browser not supported: 'AudioContext' is not defined`)\n  if (!('createAnalyser' in AudioContext.prototype)) throw alert(`Browser not supported: 'AudioContext.prototype.createAnalyser' is not defined`)\n  if (!('createScriptProcessor' in AudioContext.prototype)) throw alert(`Browser not supported: 'AudioContext.prototype.createScriptProcessor' is not defined`)\n}\n\n// @ts-expect-error\nAubio().then(({ Pitch }) => {\n  initGetUserMedia();\n\n  const startEl = document.getElementById('audio-start') as HTMLButtonElement | null;\n  const pauseEl = document.getElementById('audio-pause') as HTMLButtonElement | null;\n  const tuneUpText = document.getElementById('tune-up-text') as HTMLDivElement | null;\n  const tuneDownText = document.getElementById('tune-down-text') as HTMLDivElement | null;\n  const pressPlay = document.getElementById('circle-text-play') as HTMLSpanElement | null\n  const pluckAString = document.getElementById('circle-text-pluck') as HTMLSpanElement | null;\n  const noteSpan = document.getElementById('circle-text-note') as HTMLSpanElement | null;\n  const matchCircleL = document.getElementById('match-circle-l') as HTMLDivElement | null;\n  const matchCircleR = document.getElementById('match-circle-r') as HTMLDivElement | null;\n  const innerCircle = document.getElementById('inner-circle') as HTMLDivElement | null;\n\n  const tunedJingle = document.getElementById('tuned-jingle') as HTMLAudioElement;\n  tunedJingle.volume = 0.5;\n\n  const noteEls = new Map(Object.entries(GUITAR_FREQ).map(([n]) => [n, document.getElementById(n) as unknown as SVGGElement]));\n  const fillEls = new Map(Object.entries(GUITAR_FREQ).map(([n]) => [n, document.getElementById(`${n}-fill`) as unknown as SVGGElement]));\n\n  if (false\n    || !startEl\n    || !pauseEl\n    || !tuneUpText\n    || !tuneDownText\n    || !pressPlay\n    || !pluckAString\n    || !noteSpan\n    || !matchCircleL\n    || !matchCircleR\n    || !innerCircle\n    || !tunedJingle\n    || ![...noteEls.values()].every(isTruthy)\n    || ![...fillEls.values()].every(isTruthy)\n  ) {\n    return alert('Expected HTML element missing');\n  }\n\n  let audioContext: AudioContext;\n  let analyser: AnalyserNode;\n  let scriptProcessor: ScriptProcessorNode;\n  let pitchDetector: Aubio.Pitch;\n  // let stream: MediaStream;\n\n  pauseEl.addEventListener('click', () => {\n    scriptProcessor.disconnect(audioContext.destination);\n    analyser.disconnect(scriptProcessor);\n    audioContext.close();\n    // stream.getTracks().forEach(track => track.stop());\n\n    startEl.style.display = 'block';\n    pauseEl.style.display = 'none';\n    pressPlay.style.display = 'inline';\n    pluckAString.style.display = 'none';\n    noteSpan.style.display = 'none';\n    matchCircleR.style.color = '';\n    matchCircleL.style.transform = `translateX(125%)`;\n    tuneUpText.classList.remove('show');\n    tuneDownText.classList.remove('show');\n    toggleClass(startEl, 'blob-animation');\n  })\n\n  startEl.addEventListener('click', () => {\n    audioContext = new AudioContext();\n    analyser = audioContext.createAnalyser();\n    scriptProcessor = audioContext.createScriptProcessor(BUFFER_SIZE, 1, 1);\n    pitchDetector = new Pitch('default', BUFFER_SIZE, 1, audioContext.sampleRate);\n    // pitchDetector.setSilence(-70);\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then(stream => {\n      // stream = s;\n      audioContext.createMediaStreamSource(stream).connect(analyser);\n      analyser.connect(scriptProcessor);\n      scriptProcessor.connect(audioContext.destination);\n\n      startEl.style.display = 'none';\n      pauseEl.style.display = 'block';\n      pressPlay.style.display = 'none';\n      pluckAString.style.display = 'inline';\n      toggleClass(pauseEl, 'shrink-animation');\n\n      matchCircleL.style.visibility = 'visible';\n\n      // let prevCents = -50;\n      // let prevNote = '';\n\n      let resetable = false;\n      let softResetable = false;\n      let jinglePlayed = false;\n\n      /** The last 3 notes excluding undefined */\n      const prevNotes: string[] = new Array(PREV_BUFFER_SIZE).fill(undefined);\n\n      /** The last 36 notes (prox. 2 seconds). Used to fully reset the UI when there's only noise. */\n      const noopBuffer: string[] = new Array(NOOP_BUFFER_SIZE).fill(undefined);\n\n      /** A buffer of the last 36 cents values for each guitar note. Used to determine if a string is tuned. */\n      let centsBufferMap: Map<string, number[]> = new Map(GUITAR_NOTES.map(nn => [nn, []]));\n\n      // /** The last 3 notes including undefined. Used to reset the cents buffer between plucks of the string */\n      // const pauseBuffer: string[] = new Array(PREV_BUFFER_SIZE).fill(undefined);\n\n      scriptProcessor.addEventListener('audioprocess', event => {\n        // console.timeEnd('foo');\n        // console.time('foo');\n\n        const buffer = event.inputBuffer.getChannelData(0)\n        // const volume = volumeAudioProcess(buffer);\n        const frequency = pitchDetector.do(buffer);\n        const note = getNote(frequency);\n\n        queue(noopBuffer, note.name);\n\n        // If there has been nothing but noise for the last couple of seconds, show the message again:\n        const isNoise = [...groupedUntilChanged(noopBuffer.filter(isTruthy))].every(g => g.length <= 3);\n        if (isNoise) {\n          if (resetable) {\n            resetable = false;\n            pressPlay.style.display = 'none';\n            pluckAString.style.display = 'inline';\n            noteSpan.style.display = 'none';\n            matchCircleR.style.color = '';\n            matchCircleL.style.transform = `translateX(125%)`;\n            tuneUpText.classList.remove('show');\n            tuneDownText.classList.remove('show');\n          }\n        }\n        else if (note.name && !Number.isNaN(note.cents)) {\n          if (tunedJingle.paused) {\n            resetable = true;\n            softResetable = true;\n\n            const noteName = `${note.name}_${note.octave}`;\n            const guitarNoteName = getClosestGuitarNote(frequency);\n\n            // Show tune up/down text iff frequency is way off (more than 25 cents)\n            const isTooLow = frequency < GUITAR_FREQ[guitarNoteName];\n            if (noteName === guitarNoteName && note.cents < 25) {\n              tuneUpText.classList.remove('show');\n              tuneDownText.classList.remove('show');\n            } else {\n              tuneUpText.classList[isTooLow ? 'add' : 'remove']('show');\n              tuneDownText.classList[isTooLow ? 'remove' : 'add']('show');\n            }\n\n            // console.log(note);\n\n            // if (prevNote == note.name)\n            // const degDiff = Math.trunc(Math.abs(prevDeg - deg));\n            // prevDeg = deg;\n            // const transformTime = (degDiff + 25) * 15;\n            // console.log(noteName, note.cents)\n\n            const baseCents = noteName === guitarNoteName\n              ? note.cents\n              : isTooLow ? -85 : 85;\n\n            const absCents100 = Math.abs(baseCents) * 2;\n            const sensitivity = Math.min(10, Math.round(100 / absCents100));\n            const centsUI = round(baseCents, sensitivity);\n\n            // console.log(`${absCents2}/100 => %${sensitivity} => ${Math.abs(centsApprox) * 2}/100`);\n            // const centsApprox = note.cents;\n            // console.log(centsApprox)\n\n            // const transitionTime = 200 + Math.abs(prevCents - centsApprox) * 10;\n            // console.log(transitionTime)\n\n            // matchCircleR.style.transform = `translateX(${note.cents}%)`;\n            pluckAString.style.display = 'none';\n            noteSpan.style.display = 'inline';\n            noteSpan.innerText = guitarNoteName.split('_')[0];\n\n            const centsBuffer = centsBufferMap.get(noteName) ?? [];\n            if (noteName === guitarNoteName && centsUI === 0) centsBuffer.push(0);\n\n            const tuneRatio = clamp(centsBuffer.length / TUNE_BUFFER_SIZE);\n            // console.log(noteName, tuneRatio)\n            innerCircle.style.transition = `transform 350ms ease`\n            innerCircle.style.transform = `scale(${1 - tuneRatio})`;\n\n            matchCircleR.style.transition = `color 350ms ease`\n            matchCircleR.style.color = tuneRatio === 1 ? '#fff' : '#fff8';\n\n            matchCircleL.style.transition = `transform 350ms ease`;\n            matchCircleL.style.transform = `translateX(${centsUI * (1 - tuneRatio)}%)`;\n\n            if (tuneRatio === 1 && !jinglePlayed) {\n              tunedJingle.play();\n              set(noteEls.get(guitarNoteName)?.querySelector('path')?.style, 'fill', 'rgb(67,111,142)');\n              set(fillEls.get(guitarNoteName)?.style, 'display', 'block');\n              jinglePlayed = true;\n            }\n\n            // console.log(`Streak: ${centsHits.length}/${centsBuffer.length}`)\n\n            // prevCents = centsUI;\n            // prevNote = noteName;\n          }\n\n          queue(prevNotes, note.name);\n        }\n        else if (softResetable) {\n          // console.log('soft reset');\n          innerCircle.style.transition = 'transform 100ms'\n          innerCircle.style.transform = `scale(1)`;\n          softResetable = false;\n          jinglePlayed = false;\n          centsBufferMap = new Map(GUITAR_NOTES.map(nn => [nn, []]));\n        }\n\n        // // console.log(pauseBuffer)\n        // queue(pauseBuffer, note.name);\n      });\n    });\n  });\n});\n","export function initGetUserMedia() {\n  // @ts-ignore\n  window.AudioContext = window.AudioContext || window.webkitAudioContext\n  if (!window.AudioContext) {\n    return alert('AudioContext not supported')\n  }\n\n  // Older browsers might not implement mediaDevices at all, so we set an empty object first\n  if (navigator.mediaDevices === undefined) {\n    // @ts-ignore\n    navigator.mediaDevices = {}\n  }\n\n  // Some browsers partially implement mediaDevices. We can't just assign an object\n  // with getUserMedia as it would overwrite existing properties.\n  // Here, we will just add the getUserMedia property if it's missing.\n  if (navigator.mediaDevices.getUserMedia === undefined) {\n    navigator.mediaDevices.getUserMedia = function (constraints) {\n      // First get ahold of the legacy getUserMedia, if present\n      // @ts-ignore\n      const getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia\n\n      // Some browsers just don't implement it - return a rejected promise with an error\n      // to keep a consistent interface\n      if (!getUserMedia) {\n        alert('getUserMedia is not implemented in this browser')\n      }\n\n      // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise\n      return new Promise(function (resolve, reject) {\n        getUserMedia.call(navigator, constraints, resolve, reject)\n      })\n    }\n  }\n}"],"names":["toggleClass","element","cls","classList","remove","offsetWidth","add","NOTE_STRINGS","getNote","frequency","noteIndex","note","Math","log","round","getNoteIndex","value","index","name","cents","getCents","octave","floor","getStandardFrequency","groupedUntilChanged","xs","equals","a","b","it","Symbol","iterator","done","initial","next","group","push","prev","x","[object Object]","cont","length","console","BUFFER_SIZE","PREV_BUFFER_SIZE","ceil","GUITAR_FREQ","E_4","B_3","G_3","D_3","A_2","E_2","GUITAR_NOTES","Object","keys","GUITAR_FREQ_INV","Map","entries","map","GUITAR_FREQ_VAL","values","sort","set","obj","prop","isTruthy","queue","pop","unshift","getClosestGuitarNote","f","goal","get","reduce","curr","abs","m","Error","throwError","window","AudioContext","prototype","alert","Aubio","then","Pitch","webkitAudioContext","undefined","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","initGetUserMedia","startEl","document","getElementById","pauseEl","tuneUpText","tuneDownText","pressPlay","pluckAString","noteSpan","matchCircleL","matchCircleR","innerCircle","tunedJingle","volume","noteEls","n","fillEls","every","audioContext","analyser","scriptProcessor","pitchDetector","addEventListener","disconnect","destination","close","style","display","color","transform","createAnalyser","createScriptProcessor","sampleRate","audio","stream","createMediaStreamSource","connect","visibility","resetable","softResetable","jinglePlayed","prevNotes","Array","fill","noopBuffer","centsBufferMap","nn","event","buffer","inputBuffer","getChannelData","do","filter","g","Number","isNaN","paused","noteName","guitarNoteName","isTooLow","baseCents","absCents100","centsUI","basis","min","innerText","split","centsBuffer","tuneRatio","max","transition","play","querySelector"],"mappings":"aAAO,MAAMA,EAAc,CAACC,KAAyBC,KACnDD,EAAQE,UAAUC,UAAUF,GAGvBD,EAAQI,YAEbJ,EAAQE,UAAUG,OAAOJ,ICDdK,EAA6B,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,cAWvFC,EAAQC,GACtB,MAAMC,WAeqBD,GAC3B,MAAME,EAAaC,KAAKC,IAAIJ,EA/BP,KA+B8BG,KAAKC,IAAI,GAA/C,GACb,OAAOD,KAAKE,MAAMH,GA9BK,GAaLI,CAAaN,GAE/B,MAAO,CACLO,MAAON,EAAY,GACnBO,MAAOP,EACPQ,KAAMX,EAAaG,EAAY,IAC/BS,MAAOC,EAASX,EAAWC,GAC3BW,OAAQT,KAAKU,MAAMZ,EAAY,IAAM,EACrCD,UAAWA,YAsBCW,EAASX,EAAmBE,GAC1C,OAAOC,KAAKU,MAAO,KAAOV,KAAKC,IAAIJ,WARAE,GACnC,OAvCqB,IAuCHC,SAAA,GAAOD,EArCF,IAqCsB,IAOEY,CAAqBZ,IAAUC,KAAKC,IAAI,aC3CxEW,EAAuBC,EAAiBC,EAAkC,EAACC,EAAGC,IAAMD,IAAMC,IACzG,MAAMC,EAAKJ,EAAGK,OAAOC,aACfC,KAAEA,EAAMhB,MAAOiB,GAAYJ,EAAGK,OACpC,GAAIF,EAAM,OAEV,IAAIG,EAAa,GAEjBA,EAAMC,KAAKH,GACX,IAAII,EAAOJ,EAEX,IAAK,MAAMK,cAdWT,GACtB,MAAO,CAAEU,CAACT,OAAOC,UAAS,IAAYF,GAatBW,CAAKX,GACfH,EAAOY,EAAGD,IACZF,EAAMC,KAAKE,GACXD,EAAOC,SAED,IAAIH,GACVA,EAAQ,CAACG,GACTD,EAAOC,GAIPH,EAAMM,eAAcN;;;;;;;;;;;;;;;;;GCH1BO,QAAQ7B,IAAI,0EAEZ,MAAM8B,EAAc/B,SAAA,EAAK,IAGnBgC,EAAmBhC,KAAKiC,KAAK,KAI7BC,EAAc,CAClBC,IAAO,OACPC,IAAO,OACPC,IAAO,IACPC,IAAO,OACPC,IAAO,IACPC,IAAO,OAEHC,EAAeC,OAAOC,KAAKT,GAC3BU,EAAkB,IAAIC,IAAIH,OAAOI,QAAQZ,GAAaa,KAAI,EAAEhC,EAAGC,KAAO,CAACA,EAAGD,MAC1EiC,EAAkBN,OAAOO,OAAOf,GAAagB,OAG7CC,EAAM,CAACC,EAAUC,EAAWjD,IAAegD,IAAQA,EAAIC,GAAQjD,GAC/DkD,EAAY5B,KAAaA,EAUzB6B,EAAQ,CAAIxC,EAA2BW,KAAUX,MAAAA,GAAAA,EAAGyC,MAAOzC,MAAAA,GAAAA,EAAG0C,QAAQ/B,GAAIX,GAK1E2C,EAAwBC,UAHAC,mBAGchB,EAAgBiB,KAH9BD,EAG2DD,EAAjBX,EAHvBc,QAAO,CAACrC,EAAMsC,IAC5D/D,KAAKgE,IAAID,EAAOH,GAAQ5D,KAAKgE,IAAIvC,EAAOmC,GAAQG,EAAOtC,qBAFvC,CAACwC,IAAiB,MAAMC,MAAMD,IAI+CE,IAEhG,KACO,gBAAiBC,QACjB,iBAAkBA,QAClB,mBAAoBC,aAAaC,WACjC,0BAA2BD,aAAaC,WAC7C,CACA,KAAM,gBAAiBF,QAAS,MAAMG,MAAM,uDAC5C,KAAM,iBAAkBH,QAAS,MAAMG,MAAM,wDAC7C,KAAM,mBAAoBF,aAAaC,WAAY,MAAMC,MAAM,iFAC/D,KAAM,0BAA2BF,aAAaC,WAAY,MAAMC,MAAM,wFAIxEC,QAAQC,MAAK,EAAGC,MAAAA,kBCzEd,GADAN,OAAOC,aAAeD,OAAOC,cAAgBD,OAAOO,oBAC/CP,OAAOC,aACV,OAAOE,MAAM,mCAIgBK,IAA3BC,UAAUC,eAEZD,UAAUC,aAAe,SAMiBF,IAAxCC,UAAUC,aAAaC,eACzBF,UAAUC,aAAaC,aAAe,SAAUC,GAG9C,MAAMD,EAAeF,UAAUI,oBAAsBJ,UAAUK,gBAS/D,OALKH,GACHR,MAAM,mDAID,IAAIY,SAAQ,SAAUC,EAASC,GACpCN,EAAaO,KAAKT,UAAWG,EAAaI,EAASC,QD+CzDE,GAEA,MAAMC,EAAUC,SAASC,eAAe,eAClCC,EAAUF,SAASC,eAAe,eAClCE,EAAaH,SAASC,eAAe,gBACrCG,EAAeJ,SAASC,eAAe,kBACvCI,EAAYL,SAASC,eAAe,oBACpCK,EAAeN,SAASC,eAAe,qBACvCM,EAAWP,SAASC,eAAe,oBACnCO,EAAeR,SAASC,eAAe,kBACvCQ,EAAeT,SAASC,eAAe,kBACvCS,EAAcV,SAASC,eAAe,gBAEtCU,EAAcX,SAASC,eAAe,gBAC5CU,EAAYC,OAAS,GAErB,MAAMC,EAAU,IAAIzD,IAAIH,OAAOI,QAAQZ,GAAaa,KAAI,EAAEwD,KAAO,CAACA,EAAGd,SAASC,eAAea,OACvFC,EAAU,IAAI3D,IAAIH,OAAOI,QAAQZ,GAAaa,KAAI,EAAEwD,KAAO,CAACA,EAAGd,SAASC,eAAkBa,EAAH,aAE7F,KACMf,GACAG,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACA,IAAIE,EAAQrD,UAAUwD,MAAMnD,IAC5B,IAAIkD,EAAQvD,UAAUwD,MAAMnD,IAEhC,OAAOiB,MAAM,iCAGf,IAAImC,EACAC,EACAC,EACAC,EAGJlB,EAAQmB,iBAAiB,SAAS,KAChCF,EAAgBG,WAAWL,EAAaM,aACxCL,EAASI,WAAWH,GACpBF,EAAaO,QAGbzB,EAAQ0B,MAAMC,QAAU,QACxBxB,EAAQuB,MAAMC,QAAU,OACxBrB,EAAUoB,MAAMC,QAAU,SAC1BpB,EAAamB,MAAMC,QAAU,OAC7BnB,EAASkB,MAAMC,QAAU,OACzBjB,EAAagB,MAAME,MAAQ,GAC3BnB,EAAaiB,MAAMG,UAAY,mBAC/BzB,EAAWrG,UAAUC,OAAO,QAC5BqG,EAAatG,UAAUC,OAAO,QAC9BJ,EAAYoG,EAAS,qBAGvBA,EAAQsB,iBAAiB,SAAS,KAChCJ,EAAe,IAAIrC,aACnBsC,EAAWD,EAAaY,iBACxBV,EAAkBF,EAAaa,sBAAsBxF,EAAa,EAAG,GACrE8E,EAAgB,IAAInC,EAAM,UAAW3C,EAAa,EAAG2E,EAAac,YAGlE3C,UAAUC,aAAaC,aAAa,CAAE0C,OAAO,IAAQhD,MAAKiD,IAExDhB,EAAaiB,wBAAwBD,GAAQE,QAAQjB,GACrDA,EAASiB,QAAQhB,GACjBA,EAAgBgB,QAAQlB,EAAaM,aAErCxB,EAAQ0B,MAAMC,QAAU,OACxBxB,EAAQuB,MAAMC,QAAU,QACxBrB,EAAUoB,MAAMC,QAAU,OAC1BpB,EAAamB,MAAMC,QAAU,SAC7B/H,EAAYuG,EAAS,oBAErBM,EAAaiB,MAAMW,WAAa,UAKhC,IAAIC,GAAY,EACZC,GAAgB,EAChBC,GAAe,EAGnB,MAAMC,EAAsB,IAAIC,MAAMlG,GAAkBmG,UAAKvD,GAGvDwD,EAAuB,IAAIF,MA7Id,IA6IsCC,UAAKvD,GAG9D,IAAIyD,EAAwC,IAAIxF,IAAIJ,EAAaM,KAAIuF,GAAM,CAACA,EAAI,OAKhF1B,EAAgBE,iBAAiB,gBAAgByB,gBAI/C,MAAMC,EAASD,EAAME,YAAYC,eAAe,GAE1C7I,EAAYgH,EAAc8B,GAAGH,GAC7BzI,EAAOH,EAAQC,GAErB0D,EAAM6E,EAAYrI,EAAKO,MAIvB,GADgB,IAAIM,EAAoBwH,EAAWQ,OAAOtF,KAAYmD,OAAMoC,GAAKA,EAAEhH,QAAU,IAEvFiG,IACFA,GAAY,EACZhC,EAAUoB,MAAMC,QAAU,OAC1BpB,EAAamB,MAAMC,QAAU,SAC7BnB,EAASkB,MAAMC,QAAU,OACzBjB,EAAagB,MAAME,MAAQ,GAC3BnB,EAAaiB,MAAMG,UAAY,mBAC/BzB,EAAWrG,UAAUC,OAAO,QAC5BqG,EAAatG,UAAUC,OAAO,cAG7B,GAAIO,EAAKO,OAASwI,OAAOC,MAAMhJ,EAAKQ,OAAQ,CAC/C,GAAI6F,EAAY4C,OAAQ,CACtBlB,GAAY,EACZC,GAAgB,EAEhB,MAAMkB,EAAW,GAAGlJ,EAAKO,QAAQP,EAAKU,SAChCyI,EAAiBxF,EAAqB7D,GAGtCsJ,EAAWtJ,EAAYqC,EAAYgH,GACrCD,IAAaC,GAAkBnJ,EAAKQ,MAAQ,IAC9CqF,EAAWrG,UAAUC,OAAO,QAC5BqG,EAAatG,UAAUC,OAAO,UAE9BoG,EAAWrG,UAAU4J,EAAW,MAAQ,UAAU,QAClDtD,EAAatG,UAAU4J,EAAW,SAAW,OAAO,SAWtD,MAAMC,EAAYH,IAAaC,EAC3BnJ,EAAKQ,MACL4I,GAAY,GAAK,GAEfE,EAAoC,EAAtBrJ,KAAKgE,IAAIoF,GAEvBE,EAvLJ,EAAC/C,EAAWgD,EAAQ,IAAMvJ,KAAKE,MAAMqG,EAAIgD,GAASA,EAuLpCrJ,CAAMkJ,EADFpJ,KAAKwJ,IAAI,GAAIxJ,KAAKE,MAAM,IAAMmJ,KAWlDtD,EAAamB,MAAMC,QAAU,OAC7BnB,EAASkB,MAAMC,QAAU,SACzBnB,EAASyD,UAAYP,EAAeQ,MAAM,KAAK,GAE/C,MAAMC,YAActB,EAAexE,IAAIoF,kBAAa,GAChDA,IAAaC,GAA8B,IAAZI,GAAeK,EAAYnI,KAAK,GAEnE,MAAMoI,GAvMHrD,EAuMqBoD,EAAY9H,OA9NvB,EAuBI7B,KAAK6J,IAAI,EAAG7J,KAAKwJ,IAAI,EAAGjD,KAyMzCJ,EAAYe,MAAM4C,WAAa,uBAC/B3D,EAAYe,MAAMG,UAAY,SAAS,EAAIuC,KAE3C1D,EAAagB,MAAM4C,WAAa,mBAChC5D,EAAagB,MAAME,MAAsB,IAAdwC,EAAkB,OAAS,QAEtD3D,EAAaiB,MAAM4C,WAAa,uBAChC7D,EAAaiB,MAAMG,UAAY,cAAciC,GAAW,EAAIM,OAE1C,IAAdA,GAAoB5B,IACtB5B,EAAY2D,OACZ5G,sBAAImD,EAAQzC,IAAIqF,yBAAiBc,cAAc,8BAAS9C,MAAO,OAAQ,mBACvE/D,YAAIqD,EAAQ3C,IAAIqF,yBAAiBhC,MAAO,UAAW,SACnDc,GAAe,GASnBzE,EAAM0E,EAAWlI,EAAKO,WAEfyH,IAEP5B,EAAYe,MAAM4C,WAAa,kBAC/B3D,EAAYe,MAAMG,UAAY,WAC9BU,GAAgB,EAChBC,GAAe,EACfK,EAAiB,IAAIxF,IAAIJ,EAAaM,KAAIuF,GAAM,CAACA,EAAI,QAvOjD,IAAC/B"}